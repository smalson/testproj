// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ROV_Gamepad.proto

package org.metamorarobotics.gamepad;

public final class ROVGamepad {
  private ROVGamepad() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GamepadValuesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.metamorarobotics.gamepad.GamepadValues)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required bool a = 1;</code>
     */
    boolean hasA();
    /**
     * <code>required bool a = 1;</code>
     */
    boolean getA();

    /**
     * <code>required bool b = 2;</code>
     */
    boolean hasB();
    /**
     * <code>required bool b = 2;</code>
     */
    boolean getB();

    /**
     * <code>required bool x = 3;</code>
     */
    boolean hasX();
    /**
     * <code>required bool x = 3;</code>
     */
    boolean getX();

    /**
     * <code>required bool y = 4;</code>
     */
    boolean hasY();
    /**
     * <code>required bool y = 4;</code>
     */
    boolean getY();

    /**
     * <code>required bool start = 5;</code>
     */
    boolean hasStart();
    /**
     * <code>required bool start = 5;</code>
     */
    boolean getStart();

    /**
     * <code>required bool back = 6;</code>
     */
    boolean hasBack();
    /**
     * <code>required bool back = 6;</code>
     */
    boolean getBack();

    /**
     * <code>required bool dpadUp = 7;</code>
     */
    boolean hasDpadUp();
    /**
     * <code>required bool dpadUp = 7;</code>
     */
    boolean getDpadUp();

    /**
     * <code>required bool dpadRight = 8;</code>
     */
    boolean hasDpadRight();
    /**
     * <code>required bool dpadRight = 8;</code>
     */
    boolean getDpadRight();

    /**
     * <code>required bool dpadLeft = 9;</code>
     */
    boolean hasDpadLeft();
    /**
     * <code>required bool dpadLeft = 9;</code>
     */
    boolean getDpadLeft();

    /**
     * <code>required bool dpadDown = 10;</code>
     */
    boolean hasDpadDown();
    /**
     * <code>required bool dpadDown = 10;</code>
     */
    boolean getDpadDown();

    /**
     * <code>required bool leftBumper = 11;</code>
     */
    boolean hasLeftBumper();
    /**
     * <code>required bool leftBumper = 11;</code>
     */
    boolean getLeftBumper();

    /**
     * <code>required float leftTrigger = 12;</code>
     */
    boolean hasLeftTrigger();
    /**
     * <code>required float leftTrigger = 12;</code>
     */
    float getLeftTrigger();

    /**
     * <code>required bool leftStickButton = 13;</code>
     */
    boolean hasLeftStickButton();
    /**
     * <code>required bool leftStickButton = 13;</code>
     */
    boolean getLeftStickButton();

    /**
     * <code>required float leftStickX = 14;</code>
     */
    boolean hasLeftStickX();
    /**
     * <code>required float leftStickX = 14;</code>
     */
    float getLeftStickX();

    /**
     * <code>required float leftStickY = 15;</code>
     */
    boolean hasLeftStickY();
    /**
     * <code>required float leftStickY = 15;</code>
     */
    float getLeftStickY();

    /**
     * <code>required bool rightBumper = 16;</code>
     */
    boolean hasRightBumper();
    /**
     * <code>required bool rightBumper = 16;</code>
     */
    boolean getRightBumper();

    /**
     * <code>required float rightTrigger = 17;</code>
     */
    boolean hasRightTrigger();
    /**
     * <code>required float rightTrigger = 17;</code>
     */
    float getRightTrigger();

    /**
     * <code>required bool rightStickButton = 18;</code>
     */
    boolean hasRightStickButton();
    /**
     * <code>required bool rightStickButton = 18;</code>
     */
    boolean getRightStickButton();

    /**
     * <code>required float rightStickX = 19;</code>
     */
    boolean hasRightStickX();
    /**
     * <code>required float rightStickX = 19;</code>
     */
    float getRightStickX();

    /**
     * <code>required float rightStickY = 20;</code>
     */
    boolean hasRightStickY();
    /**
     * <code>required float rightStickY = 20;</code>
     */
    float getRightStickY();
  }
  /**
   * Protobuf type {@code org.metamorarobotics.gamepad.GamepadValues}
   */
  public static final class GamepadValues extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.metamorarobotics.gamepad.GamepadValues)
      GamepadValuesOrBuilder {
    // Use GamepadValues.newBuilder() to construct.
    private GamepadValues(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GamepadValues(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GamepadValues defaultInstance;
    public static GamepadValues getDefaultInstance() {
      return defaultInstance;
    }

    public GamepadValues getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GamepadValues(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              a_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              b_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              x_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              y_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              start_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              back_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              dpadUp_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              dpadRight_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              dpadLeft_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              dpadDown_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              leftBumper_ = input.readBool();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              leftTrigger_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              leftStickButton_ = input.readBool();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              leftStickX_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              leftStickY_ = input.readFloat();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              rightBumper_ = input.readBool();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              rightTrigger_ = input.readFloat();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              rightStickButton_ = input.readBool();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              rightStickX_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              rightStickY_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.metamorarobotics.gamepad.ROVGamepad.internal_static_org_metamorarobotics_gamepad_GamepadValues_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.metamorarobotics.gamepad.ROVGamepad.internal_static_org_metamorarobotics_gamepad_GamepadValues_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.metamorarobotics.gamepad.ROVGamepad.GamepadValues.class, org.metamorarobotics.gamepad.ROVGamepad.GamepadValues.Builder.class);
    }

    public static com.google.protobuf.Parser<GamepadValues> PARSER =
        new com.google.protobuf.AbstractParser<GamepadValues>() {
      public GamepadValues parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GamepadValues(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GamepadValues> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int A_FIELD_NUMBER = 1;
    private boolean a_;
    /**
     * <code>required bool a = 1;</code>
     */
    public boolean hasA() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool a = 1;</code>
     */
    public boolean getA() {
      return a_;
    }

    public static final int B_FIELD_NUMBER = 2;
    private boolean b_;
    /**
     * <code>required bool b = 2;</code>
     */
    public boolean hasB() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool b = 2;</code>
     */
    public boolean getB() {
      return b_;
    }

    public static final int X_FIELD_NUMBER = 3;
    private boolean x_;
    /**
     * <code>required bool x = 3;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool x = 3;</code>
     */
    public boolean getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 4;
    private boolean y_;
    /**
     * <code>required bool y = 4;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool y = 4;</code>
     */
    public boolean getY() {
      return y_;
    }

    public static final int START_FIELD_NUMBER = 5;
    private boolean start_;
    /**
     * <code>required bool start = 5;</code>
     */
    public boolean hasStart() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool start = 5;</code>
     */
    public boolean getStart() {
      return start_;
    }

    public static final int BACK_FIELD_NUMBER = 6;
    private boolean back_;
    /**
     * <code>required bool back = 6;</code>
     */
    public boolean hasBack() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool back = 6;</code>
     */
    public boolean getBack() {
      return back_;
    }

    public static final int DPADUP_FIELD_NUMBER = 7;
    private boolean dpadUp_;
    /**
     * <code>required bool dpadUp = 7;</code>
     */
    public boolean hasDpadUp() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool dpadUp = 7;</code>
     */
    public boolean getDpadUp() {
      return dpadUp_;
    }

    public static final int DPADRIGHT_FIELD_NUMBER = 8;
    private boolean dpadRight_;
    /**
     * <code>required bool dpadRight = 8;</code>
     */
    public boolean hasDpadRight() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required bool dpadRight = 8;</code>
     */
    public boolean getDpadRight() {
      return dpadRight_;
    }

    public static final int DPADLEFT_FIELD_NUMBER = 9;
    private boolean dpadLeft_;
    /**
     * <code>required bool dpadLeft = 9;</code>
     */
    public boolean hasDpadLeft() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required bool dpadLeft = 9;</code>
     */
    public boolean getDpadLeft() {
      return dpadLeft_;
    }

    public static final int DPADDOWN_FIELD_NUMBER = 10;
    private boolean dpadDown_;
    /**
     * <code>required bool dpadDown = 10;</code>
     */
    public boolean hasDpadDown() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required bool dpadDown = 10;</code>
     */
    public boolean getDpadDown() {
      return dpadDown_;
    }

    public static final int LEFTBUMPER_FIELD_NUMBER = 11;
    private boolean leftBumper_;
    /**
     * <code>required bool leftBumper = 11;</code>
     */
    public boolean hasLeftBumper() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required bool leftBumper = 11;</code>
     */
    public boolean getLeftBumper() {
      return leftBumper_;
    }

    public static final int LEFTTRIGGER_FIELD_NUMBER = 12;
    private float leftTrigger_;
    /**
     * <code>required float leftTrigger = 12;</code>
     */
    public boolean hasLeftTrigger() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required float leftTrigger = 12;</code>
     */
    public float getLeftTrigger() {
      return leftTrigger_;
    }

    public static final int LEFTSTICKBUTTON_FIELD_NUMBER = 13;
    private boolean leftStickButton_;
    /**
     * <code>required bool leftStickButton = 13;</code>
     */
    public boolean hasLeftStickButton() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required bool leftStickButton = 13;</code>
     */
    public boolean getLeftStickButton() {
      return leftStickButton_;
    }

    public static final int LEFTSTICKX_FIELD_NUMBER = 14;
    private float leftStickX_;
    /**
     * <code>required float leftStickX = 14;</code>
     */
    public boolean hasLeftStickX() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required float leftStickX = 14;</code>
     */
    public float getLeftStickX() {
      return leftStickX_;
    }

    public static final int LEFTSTICKY_FIELD_NUMBER = 15;
    private float leftStickY_;
    /**
     * <code>required float leftStickY = 15;</code>
     */
    public boolean hasLeftStickY() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required float leftStickY = 15;</code>
     */
    public float getLeftStickY() {
      return leftStickY_;
    }

    public static final int RIGHTBUMPER_FIELD_NUMBER = 16;
    private boolean rightBumper_;
    /**
     * <code>required bool rightBumper = 16;</code>
     */
    public boolean hasRightBumper() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required bool rightBumper = 16;</code>
     */
    public boolean getRightBumper() {
      return rightBumper_;
    }

    public static final int RIGHTTRIGGER_FIELD_NUMBER = 17;
    private float rightTrigger_;
    /**
     * <code>required float rightTrigger = 17;</code>
     */
    public boolean hasRightTrigger() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required float rightTrigger = 17;</code>
     */
    public float getRightTrigger() {
      return rightTrigger_;
    }

    public static final int RIGHTSTICKBUTTON_FIELD_NUMBER = 18;
    private boolean rightStickButton_;
    /**
     * <code>required bool rightStickButton = 18;</code>
     */
    public boolean hasRightStickButton() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required bool rightStickButton = 18;</code>
     */
    public boolean getRightStickButton() {
      return rightStickButton_;
    }

    public static final int RIGHTSTICKX_FIELD_NUMBER = 19;
    private float rightStickX_;
    /**
     * <code>required float rightStickX = 19;</code>
     */
    public boolean hasRightStickX() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required float rightStickX = 19;</code>
     */
    public float getRightStickX() {
      return rightStickX_;
    }

    public static final int RIGHTSTICKY_FIELD_NUMBER = 20;
    private float rightStickY_;
    /**
     * <code>required float rightStickY = 20;</code>
     */
    public boolean hasRightStickY() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required float rightStickY = 20;</code>
     */
    public float getRightStickY() {
      return rightStickY_;
    }

    private void initFields() {
      a_ = false;
      b_ = false;
      x_ = false;
      y_ = false;
      start_ = false;
      back_ = false;
      dpadUp_ = false;
      dpadRight_ = false;
      dpadLeft_ = false;
      dpadDown_ = false;
      leftBumper_ = false;
      leftTrigger_ = 0F;
      leftStickButton_ = false;
      leftStickX_ = 0F;
      leftStickY_ = 0F;
      rightBumper_ = false;
      rightTrigger_ = 0F;
      rightStickButton_ = false;
      rightStickX_ = 0F;
      rightStickY_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasA()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasB()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStart()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBack()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDpadUp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDpadRight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDpadLeft()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDpadDown()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLeftBumper()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLeftTrigger()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLeftStickButton()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLeftStickX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLeftStickY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRightBumper()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRightTrigger()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRightStickButton()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRightStickX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRightStickY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, a_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, b_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, start_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, back_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, dpadUp_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, dpadRight_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, dpadLeft_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, dpadDown_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, leftBumper_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, leftTrigger_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(13, leftStickButton_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, leftStickX_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, leftStickY_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBool(16, rightBumper_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, rightTrigger_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBool(18, rightStickButton_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, rightStickX_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, rightStickY_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, a_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, b_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, start_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, back_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, dpadUp_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, dpadRight_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, dpadLeft_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, dpadDown_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, leftBumper_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, leftTrigger_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, leftStickButton_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, leftStickX_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, leftStickY_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, rightBumper_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, rightTrigger_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, rightStickButton_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, rightStickX_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, rightStickY_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.metamorarobotics.gamepad.ROVGamepad.GamepadValues prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.metamorarobotics.gamepad.GamepadValues}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.metamorarobotics.gamepad.GamepadValues)
        org.metamorarobotics.gamepad.ROVGamepad.GamepadValuesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.metamorarobotics.gamepad.ROVGamepad.internal_static_org_metamorarobotics_gamepad_GamepadValues_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.metamorarobotics.gamepad.ROVGamepad.internal_static_org_metamorarobotics_gamepad_GamepadValues_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.metamorarobotics.gamepad.ROVGamepad.GamepadValues.class, org.metamorarobotics.gamepad.ROVGamepad.GamepadValues.Builder.class);
      }

      // Construct using org.metamorarobotics.gamepad.ROVGamepad.GamepadValues.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        a_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        b_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        start_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        back_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        dpadUp_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        dpadRight_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        dpadLeft_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        dpadDown_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        leftBumper_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        leftTrigger_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        leftStickButton_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        leftStickX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        leftStickY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        rightBumper_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        rightTrigger_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        rightStickButton_ = false;
        bitField0_ = (bitField0_ & ~0x00020000);
        rightStickX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        rightStickY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.metamorarobotics.gamepad.ROVGamepad.internal_static_org_metamorarobotics_gamepad_GamepadValues_descriptor;
      }

      public org.metamorarobotics.gamepad.ROVGamepad.GamepadValues getDefaultInstanceForType() {
        return org.metamorarobotics.gamepad.ROVGamepad.GamepadValues.getDefaultInstance();
      }

      public org.metamorarobotics.gamepad.ROVGamepad.GamepadValues build() {
        org.metamorarobotics.gamepad.ROVGamepad.GamepadValues result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.metamorarobotics.gamepad.ROVGamepad.GamepadValues buildPartial() {
        org.metamorarobotics.gamepad.ROVGamepad.GamepadValues result = new org.metamorarobotics.gamepad.ROVGamepad.GamepadValues(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.a_ = a_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.b_ = b_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.start_ = start_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.back_ = back_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.dpadUp_ = dpadUp_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.dpadRight_ = dpadRight_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.dpadLeft_ = dpadLeft_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.dpadDown_ = dpadDown_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.leftBumper_ = leftBumper_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.leftTrigger_ = leftTrigger_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.leftStickButton_ = leftStickButton_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.leftStickX_ = leftStickX_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.leftStickY_ = leftStickY_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.rightBumper_ = rightBumper_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.rightTrigger_ = rightTrigger_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.rightStickButton_ = rightStickButton_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.rightStickX_ = rightStickX_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.rightStickY_ = rightStickY_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.metamorarobotics.gamepad.ROVGamepad.GamepadValues) {
          return mergeFrom((org.metamorarobotics.gamepad.ROVGamepad.GamepadValues)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.metamorarobotics.gamepad.ROVGamepad.GamepadValues other) {
        if (other == org.metamorarobotics.gamepad.ROVGamepad.GamepadValues.getDefaultInstance()) return this;
        if (other.hasA()) {
          setA(other.getA());
        }
        if (other.hasB()) {
          setB(other.getB());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasStart()) {
          setStart(other.getStart());
        }
        if (other.hasBack()) {
          setBack(other.getBack());
        }
        if (other.hasDpadUp()) {
          setDpadUp(other.getDpadUp());
        }
        if (other.hasDpadRight()) {
          setDpadRight(other.getDpadRight());
        }
        if (other.hasDpadLeft()) {
          setDpadLeft(other.getDpadLeft());
        }
        if (other.hasDpadDown()) {
          setDpadDown(other.getDpadDown());
        }
        if (other.hasLeftBumper()) {
          setLeftBumper(other.getLeftBumper());
        }
        if (other.hasLeftTrigger()) {
          setLeftTrigger(other.getLeftTrigger());
        }
        if (other.hasLeftStickButton()) {
          setLeftStickButton(other.getLeftStickButton());
        }
        if (other.hasLeftStickX()) {
          setLeftStickX(other.getLeftStickX());
        }
        if (other.hasLeftStickY()) {
          setLeftStickY(other.getLeftStickY());
        }
        if (other.hasRightBumper()) {
          setRightBumper(other.getRightBumper());
        }
        if (other.hasRightTrigger()) {
          setRightTrigger(other.getRightTrigger());
        }
        if (other.hasRightStickButton()) {
          setRightStickButton(other.getRightStickButton());
        }
        if (other.hasRightStickX()) {
          setRightStickX(other.getRightStickX());
        }
        if (other.hasRightStickY()) {
          setRightStickY(other.getRightStickY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasA()) {
          
          return false;
        }
        if (!hasB()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasStart()) {
          
          return false;
        }
        if (!hasBack()) {
          
          return false;
        }
        if (!hasDpadUp()) {
          
          return false;
        }
        if (!hasDpadRight()) {
          
          return false;
        }
        if (!hasDpadLeft()) {
          
          return false;
        }
        if (!hasDpadDown()) {
          
          return false;
        }
        if (!hasLeftBumper()) {
          
          return false;
        }
        if (!hasLeftTrigger()) {
          
          return false;
        }
        if (!hasLeftStickButton()) {
          
          return false;
        }
        if (!hasLeftStickX()) {
          
          return false;
        }
        if (!hasLeftStickY()) {
          
          return false;
        }
        if (!hasRightBumper()) {
          
          return false;
        }
        if (!hasRightTrigger()) {
          
          return false;
        }
        if (!hasRightStickButton()) {
          
          return false;
        }
        if (!hasRightStickX()) {
          
          return false;
        }
        if (!hasRightStickY()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.metamorarobotics.gamepad.ROVGamepad.GamepadValues parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.metamorarobotics.gamepad.ROVGamepad.GamepadValues) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean a_ ;
      /**
       * <code>required bool a = 1;</code>
       */
      public boolean hasA() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool a = 1;</code>
       */
      public boolean getA() {
        return a_;
      }
      /**
       * <code>required bool a = 1;</code>
       */
      public Builder setA(boolean value) {
        bitField0_ |= 0x00000001;
        a_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool a = 1;</code>
       */
      public Builder clearA() {
        bitField0_ = (bitField0_ & ~0x00000001);
        a_ = false;
        onChanged();
        return this;
      }

      private boolean b_ ;
      /**
       * <code>required bool b = 2;</code>
       */
      public boolean hasB() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool b = 2;</code>
       */
      public boolean getB() {
        return b_;
      }
      /**
       * <code>required bool b = 2;</code>
       */
      public Builder setB(boolean value) {
        bitField0_ |= 0x00000002;
        b_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool b = 2;</code>
       */
      public Builder clearB() {
        bitField0_ = (bitField0_ & ~0x00000002);
        b_ = false;
        onChanged();
        return this;
      }

      private boolean x_ ;
      /**
       * <code>required bool x = 3;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool x = 3;</code>
       */
      public boolean getX() {
        return x_;
      }
      /**
       * <code>required bool x = 3;</code>
       */
      public Builder setX(boolean value) {
        bitField0_ |= 0x00000004;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool x = 3;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000004);
        x_ = false;
        onChanged();
        return this;
      }

      private boolean y_ ;
      /**
       * <code>required bool y = 4;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool y = 4;</code>
       */
      public boolean getY() {
        return y_;
      }
      /**
       * <code>required bool y = 4;</code>
       */
      public Builder setY(boolean value) {
        bitField0_ |= 0x00000008;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool y = 4;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000008);
        y_ = false;
        onChanged();
        return this;
      }

      private boolean start_ ;
      /**
       * <code>required bool start = 5;</code>
       */
      public boolean hasStart() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool start = 5;</code>
       */
      public boolean getStart() {
        return start_;
      }
      /**
       * <code>required bool start = 5;</code>
       */
      public Builder setStart(boolean value) {
        bitField0_ |= 0x00000010;
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool start = 5;</code>
       */
      public Builder clearStart() {
        bitField0_ = (bitField0_ & ~0x00000010);
        start_ = false;
        onChanged();
        return this;
      }

      private boolean back_ ;
      /**
       * <code>required bool back = 6;</code>
       */
      public boolean hasBack() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool back = 6;</code>
       */
      public boolean getBack() {
        return back_;
      }
      /**
       * <code>required bool back = 6;</code>
       */
      public Builder setBack(boolean value) {
        bitField0_ |= 0x00000020;
        back_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool back = 6;</code>
       */
      public Builder clearBack() {
        bitField0_ = (bitField0_ & ~0x00000020);
        back_ = false;
        onChanged();
        return this;
      }

      private boolean dpadUp_ ;
      /**
       * <code>required bool dpadUp = 7;</code>
       */
      public boolean hasDpadUp() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool dpadUp = 7;</code>
       */
      public boolean getDpadUp() {
        return dpadUp_;
      }
      /**
       * <code>required bool dpadUp = 7;</code>
       */
      public Builder setDpadUp(boolean value) {
        bitField0_ |= 0x00000040;
        dpadUp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool dpadUp = 7;</code>
       */
      public Builder clearDpadUp() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dpadUp_ = false;
        onChanged();
        return this;
      }

      private boolean dpadRight_ ;
      /**
       * <code>required bool dpadRight = 8;</code>
       */
      public boolean hasDpadRight() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required bool dpadRight = 8;</code>
       */
      public boolean getDpadRight() {
        return dpadRight_;
      }
      /**
       * <code>required bool dpadRight = 8;</code>
       */
      public Builder setDpadRight(boolean value) {
        bitField0_ |= 0x00000080;
        dpadRight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool dpadRight = 8;</code>
       */
      public Builder clearDpadRight() {
        bitField0_ = (bitField0_ & ~0x00000080);
        dpadRight_ = false;
        onChanged();
        return this;
      }

      private boolean dpadLeft_ ;
      /**
       * <code>required bool dpadLeft = 9;</code>
       */
      public boolean hasDpadLeft() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required bool dpadLeft = 9;</code>
       */
      public boolean getDpadLeft() {
        return dpadLeft_;
      }
      /**
       * <code>required bool dpadLeft = 9;</code>
       */
      public Builder setDpadLeft(boolean value) {
        bitField0_ |= 0x00000100;
        dpadLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool dpadLeft = 9;</code>
       */
      public Builder clearDpadLeft() {
        bitField0_ = (bitField0_ & ~0x00000100);
        dpadLeft_ = false;
        onChanged();
        return this;
      }

      private boolean dpadDown_ ;
      /**
       * <code>required bool dpadDown = 10;</code>
       */
      public boolean hasDpadDown() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required bool dpadDown = 10;</code>
       */
      public boolean getDpadDown() {
        return dpadDown_;
      }
      /**
       * <code>required bool dpadDown = 10;</code>
       */
      public Builder setDpadDown(boolean value) {
        bitField0_ |= 0x00000200;
        dpadDown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool dpadDown = 10;</code>
       */
      public Builder clearDpadDown() {
        bitField0_ = (bitField0_ & ~0x00000200);
        dpadDown_ = false;
        onChanged();
        return this;
      }

      private boolean leftBumper_ ;
      /**
       * <code>required bool leftBumper = 11;</code>
       */
      public boolean hasLeftBumper() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required bool leftBumper = 11;</code>
       */
      public boolean getLeftBumper() {
        return leftBumper_;
      }
      /**
       * <code>required bool leftBumper = 11;</code>
       */
      public Builder setLeftBumper(boolean value) {
        bitField0_ |= 0x00000400;
        leftBumper_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool leftBumper = 11;</code>
       */
      public Builder clearLeftBumper() {
        bitField0_ = (bitField0_ & ~0x00000400);
        leftBumper_ = false;
        onChanged();
        return this;
      }

      private float leftTrigger_ ;
      /**
       * <code>required float leftTrigger = 12;</code>
       */
      public boolean hasLeftTrigger() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required float leftTrigger = 12;</code>
       */
      public float getLeftTrigger() {
        return leftTrigger_;
      }
      /**
       * <code>required float leftTrigger = 12;</code>
       */
      public Builder setLeftTrigger(float value) {
        bitField0_ |= 0x00000800;
        leftTrigger_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float leftTrigger = 12;</code>
       */
      public Builder clearLeftTrigger() {
        bitField0_ = (bitField0_ & ~0x00000800);
        leftTrigger_ = 0F;
        onChanged();
        return this;
      }

      private boolean leftStickButton_ ;
      /**
       * <code>required bool leftStickButton = 13;</code>
       */
      public boolean hasLeftStickButton() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required bool leftStickButton = 13;</code>
       */
      public boolean getLeftStickButton() {
        return leftStickButton_;
      }
      /**
       * <code>required bool leftStickButton = 13;</code>
       */
      public Builder setLeftStickButton(boolean value) {
        bitField0_ |= 0x00001000;
        leftStickButton_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool leftStickButton = 13;</code>
       */
      public Builder clearLeftStickButton() {
        bitField0_ = (bitField0_ & ~0x00001000);
        leftStickButton_ = false;
        onChanged();
        return this;
      }

      private float leftStickX_ ;
      /**
       * <code>required float leftStickX = 14;</code>
       */
      public boolean hasLeftStickX() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required float leftStickX = 14;</code>
       */
      public float getLeftStickX() {
        return leftStickX_;
      }
      /**
       * <code>required float leftStickX = 14;</code>
       */
      public Builder setLeftStickX(float value) {
        bitField0_ |= 0x00002000;
        leftStickX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float leftStickX = 14;</code>
       */
      public Builder clearLeftStickX() {
        bitField0_ = (bitField0_ & ~0x00002000);
        leftStickX_ = 0F;
        onChanged();
        return this;
      }

      private float leftStickY_ ;
      /**
       * <code>required float leftStickY = 15;</code>
       */
      public boolean hasLeftStickY() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required float leftStickY = 15;</code>
       */
      public float getLeftStickY() {
        return leftStickY_;
      }
      /**
       * <code>required float leftStickY = 15;</code>
       */
      public Builder setLeftStickY(float value) {
        bitField0_ |= 0x00004000;
        leftStickY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float leftStickY = 15;</code>
       */
      public Builder clearLeftStickY() {
        bitField0_ = (bitField0_ & ~0x00004000);
        leftStickY_ = 0F;
        onChanged();
        return this;
      }

      private boolean rightBumper_ ;
      /**
       * <code>required bool rightBumper = 16;</code>
       */
      public boolean hasRightBumper() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required bool rightBumper = 16;</code>
       */
      public boolean getRightBumper() {
        return rightBumper_;
      }
      /**
       * <code>required bool rightBumper = 16;</code>
       */
      public Builder setRightBumper(boolean value) {
        bitField0_ |= 0x00008000;
        rightBumper_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool rightBumper = 16;</code>
       */
      public Builder clearRightBumper() {
        bitField0_ = (bitField0_ & ~0x00008000);
        rightBumper_ = false;
        onChanged();
        return this;
      }

      private float rightTrigger_ ;
      /**
       * <code>required float rightTrigger = 17;</code>
       */
      public boolean hasRightTrigger() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required float rightTrigger = 17;</code>
       */
      public float getRightTrigger() {
        return rightTrigger_;
      }
      /**
       * <code>required float rightTrigger = 17;</code>
       */
      public Builder setRightTrigger(float value) {
        bitField0_ |= 0x00010000;
        rightTrigger_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float rightTrigger = 17;</code>
       */
      public Builder clearRightTrigger() {
        bitField0_ = (bitField0_ & ~0x00010000);
        rightTrigger_ = 0F;
        onChanged();
        return this;
      }

      private boolean rightStickButton_ ;
      /**
       * <code>required bool rightStickButton = 18;</code>
       */
      public boolean hasRightStickButton() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required bool rightStickButton = 18;</code>
       */
      public boolean getRightStickButton() {
        return rightStickButton_;
      }
      /**
       * <code>required bool rightStickButton = 18;</code>
       */
      public Builder setRightStickButton(boolean value) {
        bitField0_ |= 0x00020000;
        rightStickButton_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool rightStickButton = 18;</code>
       */
      public Builder clearRightStickButton() {
        bitField0_ = (bitField0_ & ~0x00020000);
        rightStickButton_ = false;
        onChanged();
        return this;
      }

      private float rightStickX_ ;
      /**
       * <code>required float rightStickX = 19;</code>
       */
      public boolean hasRightStickX() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required float rightStickX = 19;</code>
       */
      public float getRightStickX() {
        return rightStickX_;
      }
      /**
       * <code>required float rightStickX = 19;</code>
       */
      public Builder setRightStickX(float value) {
        bitField0_ |= 0x00040000;
        rightStickX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float rightStickX = 19;</code>
       */
      public Builder clearRightStickX() {
        bitField0_ = (bitField0_ & ~0x00040000);
        rightStickX_ = 0F;
        onChanged();
        return this;
      }

      private float rightStickY_ ;
      /**
       * <code>required float rightStickY = 20;</code>
       */
      public boolean hasRightStickY() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required float rightStickY = 20;</code>
       */
      public float getRightStickY() {
        return rightStickY_;
      }
      /**
       * <code>required float rightStickY = 20;</code>
       */
      public Builder setRightStickY(float value) {
        bitField0_ |= 0x00080000;
        rightStickY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float rightStickY = 20;</code>
       */
      public Builder clearRightStickY() {
        bitField0_ = (bitField0_ & ~0x00080000);
        rightStickY_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.metamorarobotics.gamepad.GamepadValues)
    }

    static {
      defaultInstance = new GamepadValues(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.metamorarobotics.gamepad.GamepadValues)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_metamorarobotics_gamepad_GamepadValues_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_metamorarobotics_gamepad_GamepadValues_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021ROV_Gamepad.proto\022\034org.metamorarobotic" +
      "s.gamepad\"\370\002\n\rGamepadValues\022\t\n\001a\030\001 \002(\010\022\t" +
      "\n\001b\030\002 \002(\010\022\t\n\001x\030\003 \002(\010\022\t\n\001y\030\004 \002(\010\022\r\n\005start" +
      "\030\005 \002(\010\022\014\n\004back\030\006 \002(\010\022\016\n\006dpadUp\030\007 \002(\010\022\021\n\t" +
      "dpadRight\030\010 \002(\010\022\020\n\010dpadLeft\030\t \002(\010\022\020\n\010dpa" +
      "dDown\030\n \002(\010\022\022\n\nleftBumper\030\013 \002(\010\022\023\n\013leftT" +
      "rigger\030\014 \002(\002\022\027\n\017leftStickButton\030\r \002(\010\022\022\n" +
      "\nleftStickX\030\016 \002(\002\022\022\n\nleftStickY\030\017 \002(\002\022\023\n" +
      "\013rightBumper\030\020 \002(\010\022\024\n\014rightTrigger\030\021 \002(\002" +
      "\022\030\n\020rightStickButton\030\022 \002(\010\022\023\n\013rightStick",
      "X\030\023 \002(\002\022\023\n\013rightStickY\030\024 \002(\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_org_metamorarobotics_gamepad_GamepadValues_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_metamorarobotics_gamepad_GamepadValues_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_metamorarobotics_gamepad_GamepadValues_descriptor,
        new java.lang.String[] { "A", "B", "X", "Y", "Start", "Back", "DpadUp", "DpadRight", "DpadLeft", "DpadDown", "LeftBumper", "LeftTrigger", "LeftStickButton", "LeftStickX", "LeftStickY", "RightBumper", "RightTrigger", "RightStickButton", "RightStickX", "RightStickY", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
